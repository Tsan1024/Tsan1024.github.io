[{"categories":["Tech"],"contents":"k8s 架构  MasterNode包含3个程序，分别是：  ApiServer： 提供HTTP Rest接口，是集群中各种核心资源的CRUD的统一入口，是集群中各个组件交互的核心枢纽 集群资源配额的统一入口 提供了完备的集群安全机制 ControllerManager： 实时监控集群中如Service等各种资源的状态变化，不断尝试将它们的副本数量维持在一个期望的状态。 Scheduler： 负责调度功能，如：为Pod找到一个合适的宿主机器  WorkerNode包含两个组件， 分别是：  kubelet Node节点管理 Pod管理，同容器运行时交互下发容器的创建/关闭命令 容器健康状态检查 kube-proxy 通过为Service资源的ClusterIP生成iptable或ipvs规则，实现将K8S内部的服务暴露到集群外面去  概念 pod Pod 是一组紧密关联的容器集合，它们共享 IPC 和 Network namespace，是 Kubernetes 调度的基本单位。Pod 的设计理念是支持多个容器在一个 Pod 中共享网络和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。Pod的实现基于共享网络和共享存储：\n  共享网络：共享IP、Ports及MAC地址\n在POD的初始化中，会首先建立1个叫做Pause或info根容器。在这个根容器中，会被分配1个ip地址，mac地址和 ports端口。POD会继续根据要求创造若干个应用容器，每个应用容器都会作为子容器加入到根容器中，这些子容器就可以共享根容器的网络资源。  共享网络    共享存储：共享volumes K8S引入数据卷概念，使用数据卷进行持久化存储, Pod中的多个容器可以公用同一个卷进行读写, 不同Node里面的Pod也可以共用卷。  共享存储    yaml例子，Pod1中创建了两个容器app1和app2，两个容器共享data卷和网络\napiVersion: v1 kind: Pod metadata: name: Pod1 spec: containers: - name: app1 image: centos command: [\u0026quot;./app1\u0026quot;] volumeMounts: - name: data mountPath: /data - name: app2 image: centos command: [\u0026quot;./app2\u0026quot;] volumeMounts: - name: data mountPath: /data volumns: - name: data emptyDir: {} 参考链接 Kubernetes系列学习文章 - Pod的深入理解\nK8S - Pod 的概念和简介\nKubernetes\n","permalink":"https://tsan1024.github.io/post/k8s/","tags":["k8s","微服务"],"title":"k8s 使用介绍"},{"categories":["Robots"],"contents":"robots ","permalink":"https://tsan1024.github.io/post/robots/introduce/","tags":["robots"],"title":"robots introduce"},{"categories":null,"contents":"","permalink":"https://tsan1024.github.io/about/","tags":null,"title":""},{"categories":null,"contents":" ","permalink":"https://tsan1024.github.io/notes/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://tsan1024.github.io/search/placeholder/","tags":null,"title":""},{"categories":null,"contents":"","permalink":"https://tsan1024.github.io/archive/","tags":null,"title":"Posts Archive"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n[outputs] home = [\u0026quot;HTML\u0026quot;, \u0026quot;JSON\u0026quot;] Searching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n... \u0026quot;contents\u0026quot;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026quot;tags\u0026quot;:{{ .Params.tags | jsonify }}{{end}}, \u0026quot;categories\u0026quot; : {{ .Params.categories | jsonify }}, ... Edit fuse.js options to Search static/js/search.js\nkeys: [ \u0026quot;title\u0026quot;, \u0026quot;contents\u0026quot;, \u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot; ]  ##### layouts/_default/search.html {{ define \u0026ldquo;footerfiles\u0026rdquo; }}\n{{ end }} {{ define \u0026ldquo;main\u0026rdquo; }}\n","permalink":"https://tsan1024.github.io/search/","tags":null,"title":"Search Results"}]